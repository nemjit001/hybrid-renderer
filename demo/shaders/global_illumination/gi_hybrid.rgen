#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "../shader_common.glsl"
#include "../raytracing_common.glsl"

layout(location = 0) rayPayloadEXT IlluminationRayPayload giPayload;

layout(set = 0, binding = 0) uniform CAMERA { Camera camera; };
layout(set = 1, binding = 0) uniform accelerationStructureEXT TLAS;
layout(set = 1, binding = 9, rgba32f) uniform image2D globalIlluminationOut;

void main()
{
	// Calculate launch data
	const uint launchIndex = calculateLaunchIndex(gl_LaunchIDEXT, gl_LaunchSizeEXT);
	const vec2 pixelCenter = gl_LaunchIDEXT.xy + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	uint seed = initSeed(launchIndex);

	// Calculate some params
	const mat4 invProj = inverse(camera.project);
	const mat4 invView = inverse(camera.view);
	const vec2 ndc = inUV * 2.0 - 1.0;

	// Get initial hit data from GBuffer
	float initialHitDepth = float(texture(GBufferDepth, inUV));
	vec3 wPos = depthToWorldPos(invProj, invView, ndc, initialHitDepth);
	vec3 wNormal = vec3(texture(GBufferNormal, inUV));
	vec3 Wi = vec3(invView * vec4(normalize((invProj * vec4(ndc, 1, 1)).xyz), 0));

	wNormal = normalize(wNormal);
	if (dot(wNormal, Wi) > 0.0) wNormal *= -1.0;

	// Initialize ray payload
	giPayload.transmission = vec3(1);
	giPayload.energy = vec3(0);

	// TODO: trace rays further than 1st bounce

	imageStore(globalIlluminationOut, ivec2(gl_LaunchIDEXT.xy), vec4(0));
}
