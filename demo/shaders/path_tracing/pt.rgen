#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "../shader_common.glsl"
#include "../raytracing_common.glsl"

layout(location = 0) rayPayloadEXT GIRayPayload prd;

layout(set = 0, binding = 0) uniform CAMERA { Camera camera; };

layout(set = 1, binding = 0) uniform accelerationStructureEXT TLAS;
layout(set = 1, binding = 1, rgba32f) uniform image2D PathTracingOut;

layout(push_constant) uniform FRAME_INFO { FrameInfo frameInfo; };

void main()
{
	// Calculate launch & pixel info
	const uint launchIndex = gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x;
	const vec2 pixelLocation = gl_LaunchIDEXT.xy;
	const vec2 pixelCenter = pixelLocation + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);

	const mat4 invProj = inverse(camera.project);
	const mat4 invView = inverse(camera.view);
	const vec2 ndc = inUV * 2.0 - 1.0;

	vec4 iRayDirection = invProj * vec4(ndc, 1, 1);
	vec3 wPos = vec3(invView * vec4(0, 0, 0, 1));
	vec3 Wo = vec3(invView * vec4(normalize(iRayDirection.xyz), 0));

	// init payload
	prd.seed = initSeed(launchIndex + frameInfo.frameIdx * 1799);
	prd.traceDepth = 0;
	prd.rayMask = generateLODMask(prd.seed);
	prd.energy = vec3(0);
	prd.transmission = vec3(1);

	traceRayEXT(
		TLAS,
		gl_RayFlagsOpaqueEXT,
		prd.rayMask,
		0, 0, 0,
		wPos,
		RAYTRACE_RANGE_TMIN,
		Wo,
		RAYTRACE_RANGE_TMAX,
		0
	);

	imageStore(PathTracingOut, ivec2(gl_LaunchIDEXT.xy), vec4(prd.energy, 1));
}
