#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "../shader_common.glsl"
#include "../raytracing_common.glsl"

layout(location = 0) rayPayloadEXT DIRayPayload diPayload;

layout(set = 0, binding = 0) uniform CAMERA { Camera camera; };

layout(set = 1, binding = 0) uniform accelerationStructureEXT TLAS;
layout(set = 1, binding = 1) uniform sampler2D GBufferAlbedo;
layout(set = 1, binding = 2) uniform sampler2D GBufferEmission;
layout(set = 1, binding = 3) uniform sampler2D GBufferMatSpecular;
layout(set = 1, binding = 4) uniform sampler2D GBufferMatTransmittance;
layout(set = 1, binding = 5) uniform sampler2D GBufferNormal;
layout(set = 1, binding = 6) uniform sampler2D GBufferDepth;
layout(set = 1, binding = 8, rgba32f) uniform image2D directIlluminationOut;

void main()
{
	// Calculate launch data
	const uint launchIndex = calculateLaunchIndex(gl_LaunchIDEXT, gl_LaunchSizeEXT);
	const vec2 pixelCenter = gl_LaunchIDEXT.xy + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);

	// Calculate some params
	const mat4 invProj = inverse(camera.project);
	const mat4 invView = inverse(camera.view);
	const vec2 ndc = inUV * 2.0 - 1.0;

	// Get initial hit data from GBuffer
	float initialHitDepth = float(texture(GBufferDepth, inUV));
	vec3 wPos = depthToWorldPos(invProj, invView, ndc, initialHitDepth);
	vec3 wNormal = vec3(texture(GBufferNormal, inUV));
	wNormal = normalize(wNormal);

	// Initialize ray payload
	diPayload.transmission = vec3(1);
	diPayload.energy = vec3(0);

	// TODO: randomly sample light
	vec3 L = LIGHT_POS - wPos;
	vec3 Ldir = normalize(L);
	float Ldist = length(L);

	// TODO: calculate initial transmission based on surface params

	if (gbufferRayHit(initialHitDepth))
	{
		traceRayEXT(
			TLAS,
			gl_RayFlagsOpaqueEXT
			| gl_RayFlagsSkipClosestHitShaderEXT,	// TODO: use anyhit shader to accumulate transmission for transparent shadows
			0xFF,
			0, 0, 1,
			wPos,
			RAYTRACE_RANGE_TMIN,
			Ldir,
			Ldist,
			0
		);
	}

	imageStore(directIlluminationOut, ivec2(gl_LaunchIDEXT.xy), vec4(diPayload.energy, 1.0));
}
