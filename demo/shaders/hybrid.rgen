#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "shader_common.glsl"
#include "raytracing_common.glsl"

#define RT_MAX_BOUNCE_COUNT	5

layout(location = 0) rayPayloadEXT RayHitPayload prd;

layout(set = 0, binding = 0) uniform CAMERA { Camera camera; };

layout(set = 1, binding = 0) uniform accelerationStructureEXT TLAS;
layout(set = 1, binding = 1) uniform sampler2D GBufferAlbedo;
layout(set = 1, binding = 2) uniform sampler2D GBufferWorldPos;
layout(set = 1, binding = 3) uniform sampler2D GBufferNormal;
layout(set = 1, binding = 4) uniform sampler2D GBufferDepth;
layout(set = 1, binding = 5, r32f) uniform image2D softShadowOut;
layout(set = 1, binding = 6, rgba32f) uniform image2D DirectIlluminationOut;

void main()
{
	const uint rayFlags = gl_RayFlagsOpaqueEXT;
	const uint cullMask = 0xFF;

	// Calculate launch & pixel info
	const uint launchIndex = gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x;
	const vec2 pixelLocation = gl_LaunchIDEXT.xy;
	const vec2 pixelCenter = pixelLocation + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);

	// Calculate initial ray data
	const mat4 invProj = inverse(camera.project);
	const mat4 invView = inverse(camera.view);
	const vec2 dir2D = inUV * 2.0 - 1.0;

	const vec3 wPos = vec3(invView * vec4(0, 0, 0, 1));
	const vec3 wOutDir = vec3(invView * normalize(invProj * vec4(dir2D.x, dir2D.y, 1, 1)));

	// Initialize ray payload
	prd.seed = initSeed(launchIndex);
	prd.terminated = false;
	prd.origin = wPos;
	prd.direction = wOutDir;
	prd.energy = vec3(0.0);
	prd.transmission = vec3(1);

	for (uint i = 0; i < RT_MAX_BOUNCE_COUNT; i++)
	{
		traceRayEXT(
			TLAS,
			rayFlags,
			cullMask,
			0,	// SBT record offset
			0,	// SBT record stride
			0,	// Miss shader index
			prd.origin,
			RAYTRACE_RANGE_TMIN,
			prd.direction,
			RAYTRACE_RANGE_TMAX,
			0	// Payload location
		);

		if (prd.terminated)
			break;
	}

	const ivec2 pixel = ivec2(pixelLocation);
	imageStore(DirectIlluminationOut, pixel, vec4(prd.energy, 1));
}
