#pragma once

#include <hybrid_renderer.h>

struct DeferredHostOperationsExtensionDispatchTable
{
	DeferredHostOperationsExtensionDispatchTable(hri::RenderContext& ctx) : context(&ctx) {}

	hri::RenderContext* context;
	PFN_vkCreateDeferredOperationKHR vkCreateDeferredOperation = context->getDeviceFunction<PFN_vkCreateDeferredOperationKHR>("vkCreateDeferredOperationKHR");
	PFN_vkDeferredOperationJoinKHR vkDeferredOperationJoin = context->getDeviceFunction<PFN_vkDeferredOperationJoinKHR>("vkDeferredOperationJoinKHR");
	PFN_vkDestroyDeferredOperationKHR vkDestroyDeferredOperation = context->getDeviceFunction<PFN_vkDestroyDeferredOperationKHR>("vkDestroyDeferredOperationKHR");
	PFN_vkGetDeferredOperationMaxConcurrencyKHR vkGetDeferredOperationMaxConcurrency = context->getDeviceFunction<PFN_vkGetDeferredOperationMaxConcurrencyKHR>("vkGetDeferredOperationMaxConcurrencyKHR");
	PFN_vkGetDeferredOperationResultKHR vkGetDeferredOperationResult = context->getDeviceFunction<PFN_vkGetDeferredOperationResultKHR>("vkGetDeferredOperationResultKHR");
};

struct AccelerationStructureExtensionDispatchTable
{
	AccelerationStructureExtensionDispatchTable(hri::RenderContext& ctx) : context(&ctx) {}

	hri::RenderContext* context;
	PFN_vkBuildAccelerationStructuresKHR vkBuildAccelerationStructures = context->getDeviceFunction<PFN_vkBuildAccelerationStructuresKHR>("vkBuildAccelerationStructuresKHR");
	PFN_vkCmdBuildAccelerationStructuresIndirectKHR vkCmdBuildAccelerationStructuresIndirect = context->getDeviceFunction<PFN_vkCmdBuildAccelerationStructuresIndirectKHR>("vkCmdBuildAccelerationStructuresIndirectKHR");
	PFN_vkCmdBuildAccelerationStructuresKHR vkCmdBuildAccelerationStructures = context->getDeviceFunction<PFN_vkCmdBuildAccelerationStructuresKHR>("vkCmdBuildAccelerationStructuresKHR");
	PFN_vkCmdCopyAccelerationStructureKHR vkCmdCopyAccelerationStructure = context->getDeviceFunction<PFN_vkCmdCopyAccelerationStructureKHR>("vkCmdCopyAccelerationStructureKHR");
	PFN_vkCmdCopyAccelerationStructureToMemoryKHR vkCmdCopyAccelerationStructureToMemory = context->getDeviceFunction<PFN_vkCmdCopyAccelerationStructureToMemoryKHR>("vkCmdCopyAccelerationStructureToMemoryKHR");
	PFN_vkCmdCopyMemoryToAccelerationStructureKHR vkCmdCopyMemoryToAccelerationStructure = context->getDeviceFunction<PFN_vkCmdCopyMemoryToAccelerationStructureKHR>("vkCmdCopyMemoryToAccelerationStructureKHR");
	PFN_vkCmdWriteAccelerationStructuresPropertiesKHR vkCmdWriteAccelerationStructuresProperties = context->getDeviceFunction<PFN_vkCmdWriteAccelerationStructuresPropertiesKHR>("vkCmdWriteAccelerationStructuresPropertiesKHR");
	PFN_vkCopyAccelerationStructureKHR vkCopyAccelerationStructure = context->getDeviceFunction<PFN_vkCopyAccelerationStructureKHR>("vkCopyAccelerationStructureKHR");
	PFN_vkCopyAccelerationStructureToMemoryKHR vkCopyAccelerationStructureToMemory = context->getDeviceFunction<PFN_vkCopyAccelerationStructureToMemoryKHR>("vkCopyAccelerationStructureToMemoryKHR");
	PFN_vkCopyMemoryToAccelerationStructureKHR vkCopyMemoryToAccelerationStructure = context->getDeviceFunction<PFN_vkCopyMemoryToAccelerationStructureKHR>("vkCopyMemoryToAccelerationStructureKHR");
	PFN_vkCreateAccelerationStructureKHR vkCreateAccelerationStructure = context->getDeviceFunction<PFN_vkCreateAccelerationStructureKHR>("vkCreateAccelerationStructureKHR");
	PFN_vkDestroyAccelerationStructureKHR vkDestroyAccelerationStructure = context->getDeviceFunction<PFN_vkDestroyAccelerationStructureKHR>("vkDestroyAccelerationStructureKHR");
	PFN_vkGetAccelerationStructureBuildSizesKHR vkGetAccelerationStructureBuildSizes = context->getDeviceFunction<PFN_vkGetAccelerationStructureBuildSizesKHR>("vkGetAccelerationStructureBuildSizesKHR");
	PFN_vkGetAccelerationStructureDeviceAddressKHR vkGetAccelerationStructureDeviceAddress = context->getDeviceFunction<PFN_vkGetAccelerationStructureDeviceAddressKHR>("vkGetAccelerationStructureDeviceAddressKHR");
	PFN_vkGetDeviceAccelerationStructureCompatibilityKHR vkGetDeviceAccelerationStructureCompatibility = context->getDeviceFunction<PFN_vkGetDeviceAccelerationStructureCompatibilityKHR>("vkGetDeviceAccelerationStructureCompatibilityKHR");
	PFN_vkWriteAccelerationStructuresPropertiesKHR vkWriteAccelerationStructuresProperties = context->getDeviceFunction<PFN_vkWriteAccelerationStructuresPropertiesKHR>("vkWriteAccelerationStructuresPropertiesKHR");
};

struct RayTracingExtensionDispatchTable
{
	RayTracingExtensionDispatchTable(hri::RenderContext& ctx) : context(&ctx) {}

	hri::RenderContext* context;
	PFN_vkCmdSetRayTracingPipelineStackSizeKHR vkCmdSetRayTracingPipelineStackSize = context->getDeviceFunction<PFN_vkCmdSetRayTracingPipelineStackSizeKHR>("vkCmdSetRayTracingPipelineStackSizeKHR");;
	PFN_vkCmdTraceRaysIndirectKHR vkCmdTraceRaysIndirect = context->getDeviceFunction<PFN_vkCmdTraceRaysIndirectKHR>("vkCmdTraceRaysIndirectKHR");
	PFN_vkCmdTraceRaysKHR vkCmdTraceRays = context->getDeviceFunction<PFN_vkCmdTraceRaysKHR>("vkCmdTraceRaysKHR");
	PFN_vkCreateRayTracingPipelinesKHR vkCmdCreateRaytracingPipelines = context->getDeviceFunction<PFN_vkCreateRayTracingPipelinesKHR>("vkCreateRayTracingPipelinesKHR");
	PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR vkGetRayTracingCaptureReplayShaderGroupHandles = context->getDeviceFunction<PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR>("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
	PFN_vkGetRayTracingShaderGroupHandlesKHR vkGetRayTracingShaderGroupHandles = context->getDeviceFunction<PFN_vkGetRayTracingShaderGroupHandlesKHR>("vkGetRayTracingShaderGroupHandlesKHR");
	PFN_vkGetRayTracingShaderGroupStackSizeKHR vkGetRayTracingShaderGroupStackSize = context->getDeviceFunction<PFN_vkGetRayTracingShaderGroupStackSizeKHR>("vkGetRayTracingShaderGroupStackSizeKHR");
};
