#pragma once

#include <functional>

#include "config.h"
#include "platform.h"
#include "renderer_internal/render_context.h"

namespace hri
{
	typedef std::function<void(VkCommandBuffer)> HRIImmediateSubmitFunc;

	/// @brief The Frame State manages per frame data such as buffers & sync primitives
	struct FrameState
	{
		VkFence frameReady						= VK_NULL_HANDLE;
		VkSemaphore imageAvailable				= VK_NULL_HANDLE;
		VkSemaphore renderingFinished			= VK_NULL_HANDLE;
		VkCommandPool graphicsCommandPool		= VK_NULL_HANDLE;
		VkCommandBuffer graphicsCommandBuffer	= VK_NULL_HANDLE;

		static FrameState init(RenderContext* ctx);

		static void destroy(RenderContext* ctx, FrameState& frameState);
	};

	/// @brief The Render Core handles frame state and work submission.
	class RenderCore
	{
	public:
		/// @brief Create a new RenderCore instance.
		/// @param ctx The render context to use for this Renderer.
		RenderCore(RenderContext* ctx);

		/// @brief Destroy this render core instance.
		virtual ~RenderCore();

		/// @brief Start a new frame.
		void startFrame();

		/// @brief End the currently active frame, submitting recorded work to the GPU.
		void endFrame();

		/// @brief Await the finish of the currently active frame.
		void awaitFrameFinished() const;

		/// @brief Immeditely record & submit Vulkan commands, e.g. for resource transfer operations.
		/// @param submitFunc The submit function to use.
		void immediateSubmit(HRIImmediateSubmitFunc submitFunc);

	private:
		/// @brief Validate a swap chain operation result, setting the recreate flag if necessary.
		/// @param result A result value generated by a swap chain operation.
		void validateSwapchainState(VkResult result);

	private:
		RenderContext* m_pCtx			= nullptr;
		uint32_t m_previousFrame		= 0;
		uint32_t m_currentFrame			= 0;
		uint32_t m_activeSwapImage		= 0;
		bool m_recreateSwapchain		= false;
		VkCommandPool m_submitPool		= VK_NULL_HANDLE;
		FrameState m_frames[HRI_VK_FRAMES_IN_FLIGHT] = {};
	};
}
